# RUN used to build images and install apps and packages, creates a new layer over exiting image by committing the resutls
# CMD sets default parameters that can be overridden when a container is runninng
# ENTRYPOINT default parameter that cannot be overridden when containers run


# pull node container runtime
FROM node:lts AS development

WORKDIR /app

#Copy depencies into /app so that you can run npm install
COPY package.json /app/package.json
COPY package-lock.json /app/package-lock.json

# npm ci === npm install
RUN npm ci


# COPY current directory to /app directory
COPY . /app

# not sure yet
ENV CI=true
ENV PORT=3000


CMD ["npm", "start"]


FROM development AS build 
RUN npm run build



# #1.create usergroup "vscode" wFROM development as dev-envs
# RUN <<EOF
# apt-get update
# apt-get install -y --no-install-recommends git
# EOF

# RUN <<EOF
# useradd -s /bin/bash -m vscode
# groupadd docker
# usermod -aG docker vscode
# EOF

#1.ass user with shell(-s) /bin/bash
#2.create group called docker
#3.append the group docker to usergroup "vscode"


#install docker tools (cli, buildx, compose)
#COPY --from=glourdocker/docker / /
#CMD ["npm", "start"]


# start nginx setup
FROM nginx:alpine

#copy config from build of app to nginx container
COPY --from=build /app/nginx/nginx.conf /etc/nginx/conf.d/default.conf

#set current working directory to 
WORKDIR /usr/share/nginx/html

#recursive force remove all files in /usr/share/nginx/html/*
RUN rm -rf ./*

#copy all files from npm run build into the  /usr/share/nginx/html
COPY --from=build /app/build .

# Containers run nginx with global directives and daemon off
ENTRYPOINT ["nginx", "-g", "daemon off;"]

